# merge-sort
# 분할 정복 방식을 채택한 정렬 알고리즘이다.

# 주어진 배열을 n/2사이즈로 쪼갤 수 없을 때까지 쪼갠다.
# 모두 쪼개진 후에, 정렬하면서 합병한다.

# 시간복잡도는 모든 경우에 O(n log n)을 보장한다.
# 합병하는 시간 O(n) * 분할하는 시간 O(log n)의 결과이다.
# 합병하는 시간이 n의 시간이 걸리는 이유는
# 쪼개진 배열의 크기가 n이면 배열의 n번째까지 탐색해야하므로 O(n)의 시간이 소요된다.
# 분할의 시간이 O(log n)인 이유는 쪼개질 수 없을 때까지 쪼개는 과정이므로
# logn번만 2로 나눠주면 되기 때문이다.

arr = [3, 1, 6, 8, 2, 5, 9, 4, 7]
# 임시로 정렬할 공간을 마련하기 위해 merged라는 리스트를 만들어준다.
merged = [0] * len(arr)

def merge(arr, start, mid, end):
    left = start
    right = mid + 1
    # merged배열의 인덱스 포인터 pointer변수를 생성해주고
    # 그 값은 시작점 0이어야 하므로 start를 넣어준다.
    pointer = start
    
    while left <= mid and right <= end:
        if arr[left] <= arr[right]:
            merged[pointer] = arr[left]
            left += 1
        else:
            merged[pointer] = arr[right]
            right += 1
        pointer += 1
    # 한 쪽이 먼저 모두 정렬되어 배열에 남아있는 수가 있는 경우
    # 1. 왼쪽 배열이 먼저 모두 정렬되어 오른쪽 배열에 수가 남아있는 경우
    if left > mid:
        for i in range(right, end + 1):
            merged[pointer] = arr[i]
            pointer += 1
    # 2. 오른쪽 배열이 먼저 모두 정렬되어 왼쪽 배열에 수가 남아있는 경우            
    else:
        for j in range(left, mid + 1):
            merged[pointer] = arr[j]
            pointer += 1
            
    # merged 배열에 저장되어 있는 정렬된 수들을 원래 배열에 다시 넣어준다.
    for k in range(start, end + 1):
        arr[k] = merged[k]

def merge_sort(arr, start, end):
    # 리스트의 배열의 크기가 쪼개질 수 있을 떼까지 쪼개져야 하므로
    # start == end가 되면 그만 쪼개도록 한다.
    if start < end:
        mid = (start + end) // 2
        # 왼쪽 배열 분할
        merge_sort(arr, start, mid)
        # 오른쪽 배열 분할
        merge_sort(arr, mid + 1, end)
        # 병합
        merge(arr, start, mid, end)
        
merge_sort(arr, 0, len(arr) - 1)
# print(arr)
